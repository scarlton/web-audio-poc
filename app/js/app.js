angular.module('webAudioApp', ['ui.router']);

var Config;

Config = function($stateProvider, $urlRouterProvider) {
  window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
  $urlRouterProvider.otherwise('/eq/1');
  return $stateProvider.state('eq', {
    url: '/eq/:lessonNumber',
    views: {
      sidebar: {
        controller: 'LessonController',
        templateUrl: 'templates/sidebar.html'
      },
      transport: {
        controller: 'TransportController',
        templateUrl: 'templates/transport.html'
      },
      mixarea: {
        controller: 'EqController',
        templateUrl: 'templates/eq.html'
      }
    }
  });
};

angular.module('webAudioApp').config(['$stateProvider', '$urlRouterProvider', Config]);

angular.module('webAudioApp').constant('EQ_TYPES', {
  TWOBAND: [
    {
      name: 'HF',
      type: 'biquad',
      parameters: {
        type: 'highshelf',
        frequency: 12000,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }, {
      name: 'LF',
      type: 'biquad',
      parameters: {
        type: 'lowshelf',
        frequency: 80,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }
  ],
  THREEBAND: [
    {
      name: 'HF',
      type: 'biquad',
      parameters: {
        type: 'highshelf',
        frequency: 12000,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }, {
      name: 'MF',
      type: 'biquad',
      parameters: {
        type: 'peaking',
        frequency: 4000,
        gain: 0,
        Q: 1.414
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }, {
      name: 'LF',
      type: 'biquad',
      parameters: {
        type: 'lowshelf',
        frequency: 80,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }
  ],
  THREEBANDSEMIPARAMETRIC: [
    {
      name: 'HF',
      type: 'biquad',
      parameters: {
        type: 'highshelf',
        frequency: 12000,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }, {
      name: 'MF',
      type: 'biquad',
      parameters: {
        type: 'peaking',
        frequency: 4000,
        gain: 0,
        Q: 1.414
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        },
        frequency: {
          max: 15000,
          min: 500
        }
      }
    }, {
      name: 'LF',
      type: 'biquad',
      parameters: {
        type: 'lowshelf',
        frequency: 80,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }
  ],
  FOURBANDSEMIPARAMETRIC: [
    {
      name: 'HF',
      type: 'biquad',
      parameters: {
        type: 'highshelf',
        frequency: 12000,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }, {
      name: 'HM',
      type: 'biquad',
      parameters: {
        type: 'peaking',
        frequency: 3000,
        gain: 0,
        Q: 1.414
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        },
        frequency: {
          max: 15000,
          min: 500
        }
      }
    }, {
      name: 'LM',
      type: 'biquad',
      parameters: {
        type: 'peaking',
        frequency: 180,
        gain: 0,
        Q: 1.414
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        },
        frequency: {
          max: 1000,
          min: 35
        }
      }
    }, {
      name: 'LF',
      type: 'biquad',
      parameters: {
        type: 'lowshelf',
        frequency: 80,
        gain: 0
      },
      limits: {
        gain: {
          max: 15,
          min: -15
        }
      }
    }
  ]
});

var knob;

knob = function() {
  return {
    link: function(scope, elem, attrs) {
      return elem.bind('click', function() {
        return console.log(scope.thing);
      });
    },
    restrict: 'AE',
    scope: true,
    template: '<h3>Hello World!!</h3>'
  };
};

angular.module('webAudioApp').directive('knob', knob);

var channelStripFactory, lessonDescriptionMap, lessonSourceMap;

lessonSourceMap = ['assets/kick4.wav', 'assets/snare4.wav'];

lessonDescriptionMap = [
  {
    name: 'Kick',
    description: '',
    objective: ''
  }, {
    name: 'Introduction to EQ',
    description: "An equalizer is an important tool for an audio engineer - it adjusts the tone of a sound. If you've ever turned the \"Bass\" and \"Treble\" knobs on a car stereo or guitar amp, you've used a very simple EQ before.\nIt is very important for an engineer to be able to control the tonal quality of a sound because people can only hear a limited range of frequencies. It is commonly said that our hearing range is only between 20 Hertz and 20,000 Hertz, and in reality when you are mixing you probably will only deal with a small section of those frequencies. So when sounds are too loud or too quiet at certain frequencies they can sound \"thin\" or \"muddy\", or it can make it harder to hear one instrument if another instrument is playing too loud in the same frequency range. Every instrument needs its own \"space\" in the audio spectrum.",
    objective: 'This snare track doesn\'t hit the way it should. Let\'s give it some punch in the low mids.',
    objectiveList: ['Adjust the mid frequency band to make this snare track cut through the mix.']
  }
];

channelStripFactory = function() {
  return {
    getLessonSource: function(lessonNumber) {
      return lessonSourceMap[lessonNumber];
    },
    getLessonDescription: function(lessonNumber) {
      return lessonDescriptionMap[lessonNumber];
    }
  };
};

angular.module('webAudioApp').factory('channelStripFactory', channelStripFactory);

var EqController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  hasProp = {}.hasOwnProperty;

EqController = (function() {
  function EqController($scope, $stateParams, audioEngineService, EQ_TYPES) {
    this.$scope = $scope;
    this.reset = bind(this.reset, this);
    audioEngineService.initLesson($stateParams.lessonNumber);
    this.$scope.channelStrip = audioEngineService.buildChannelStrip(EQ_TYPES.THREEBAND);
  }

  EqController.prototype.reset = function() {
    var control, i, len, param, ref, results, value;
    ref = this.$scope.channelStrip.controls;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      control = ref[i];
      results.push((function() {
        var ref1, results1;
        ref1 = control.parameters;
        results1 = [];
        for (param in ref1) {
          if (!hasProp.call(ref1, param)) continue;
          value = ref1[param];
          if (param === 'type') {
            results1.push(control.node.type = value);
          } else {
            results1.push(control.node[param].value = value);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  return EqController;

})();

angular.module('webAudioApp').controller('EqController', ['$scope', '$stateParams', 'audioEngineService', 'EQ_TYPES', EqController]);

var LessonController;

LessonController = (function() {
  function LessonController($scope, $stateParams, channelStripFactory) {
    this.$scope = $scope;
    this.$scope.lesson = channelStripFactory.getLessonDescription($stateParams.lessonNumber);
  }

  return LessonController;

})();

angular.module('webAudioApp').controller('LessonController', ['$scope', '$stateParams', 'channelStripFactory', LessonController]);

var TransportController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TransportController = (function() {
  function TransportController($scope, audioEngineService) {
    this.$scope = $scope;
    this.audioEngineService = audioEngineService;
    this.onVolume = bind(this.onVolume, this);
    this.stop = bind(this.stop, this);
    this.play = bind(this.play, this);
    this.$scope.isPlaying = false;
    this.$scope.play = this.play;
    this.$scope.stop = this.stop;
    this.$scope.volume = this.audioEngineService.volume;
    this.$scope.$on('volume', this.onVolume);
  }

  TransportController.prototype.play = function() {
    this.audioEngineService.play();
    return this.$scope.isPlaying = true;
  };

  TransportController.prototype.stop = function() {
    this.audioEngineService.stop();
    return this.$scope.isPlaying = false;
  };

  TransportController.prototype.onVolume = function(event, volume) {
    if (volume[0] < -100) {
      volume[0] = -100;
    }
    if (volume[1] < -100) {
      volume[1] = -100;
    }
    if (volume !== this.$scope.volume) {
      this.$scope.volume = volume;
      return requestAnimationFrame((function(_this) {
        return function() {
          return _this.$scope.$apply();
        };
      })(this));
    }
  };

  return TransportController;

})();

angular.module('webAudioApp').controller('TransportController', ['$scope', 'audioEngineService', TransportController]);

var AudioEngineService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  hasProp = {}.hasOwnProperty;

AudioEngineService = (function() {
  AudioEngineService.prototype.volume = [-100, -100];

  AudioEngineService.prototype.volDecay = [-100, -100];

  AudioEngineService.prototype.smoothing = 0.85;

  function AudioEngineService($rootScope, $http, channelStripFactory) {
    this.$rootScope = $rootScope;
    this.$http = $http;
    this.channelStripFactory = channelStripFactory;
    this._onaudioprocess = bind(this._onaudioprocess, this);
    this.stop = bind(this.stop, this);
    this.play = bind(this.play, this);
    this._createBufferNode = bind(this._createBufferNode, this);
    this.$rootScope.$on('play', this.play);
    this.$rootScope.$on('stop', this.stop);
    this.audioEngine = new window.AudioContext();
    this.meter = this.audioEngine.createScriptProcessor(4096, 2, 2);
    this.meter.onaudioprocess = this._onaudioprocess;
    this.meter.connect(this.audioEngine.destination);
    this.masterFader = this.audioEngine.createGain();
    this.masterFader.connect(this.meter);
    this.masterFader.connect(this.audioEngine.destination);
  }

  AudioEngineService.prototype.initLesson = function(lessonNumber) {
    return this._fetchSourceAudio(this.channelStripFactory.getLessonSource(lessonNumber));
  };

  AudioEngineService.prototype.buildChannelStrip = function(controls) {
    var control, i, idx, j, len, len1, param, ref, ref1, ref2, value;
    this.controls = controls;
    ref = this.controls;
    for (i = 0, len = ref.length; i < len; i++) {
      control = ref[i];
      switch (control.type) {
        case 'gain':
          control.node = this.audioEngine.createGain();
          break;
        case 'biquad':
          control.node = this.audioEngine.createBiquadFilter();
      }
      ref1 = control.parameters;
      for (param in ref1) {
        if (!hasProp.call(ref1, param)) continue;
        value = ref1[param];
        if (param === 'type') {
          control.node.type = value;
        } else {
          control.node[param].value = value;
        }
      }
    }
    ref2 = this.controls;
    for (idx = j = 0, len1 = ref2.length; j < len1; idx = ++j) {
      control = ref2[idx];
      if (idx < this.controls.length - 1) {
        control.node.connect(this.controls[idx + 1].node);
      } else {
        control.node.connect(this.masterFader);
      }
    }
    return this.controls;
  };

  AudioEngineService.prototype._fetchSourceAudio = function(source) {
    return this.$http.get(source, {
      responseType: 'arraybuffer'
    }).then((function(_this) {
      return function(response) {
        return _this.audioEngine.decodeAudioData(response.data, _this._createBufferNode);
      };
    })(this));
  };

  AudioEngineService.prototype._createBufferNode = function(buffer) {
    return this.source = {
      buffer: buffer
    };
  };

  AudioEngineService.prototype.play = function() {
    this.source.node = this.audioEngine.createBufferSource();
    this.source.node.buffer = this.source.buffer;
    this.source.node.loop = true;
    this.source.node.connect(this.controls[0].node);
    return this.source.node.start(0, 0);
  };

  AudioEngineService.prototype.stop = function() {
    return this.source.node.stop(0);
  };

  AudioEngineService.prototype._onaudioprocess = function(event) {
    var bufLength, i, idx, leftChannel, ref, rightChannel, rmsL, rmsR, volL, volR;
    bufLength = event.inputBuffer.length;
    rmsL = 0;
    rmsR = 0;
    leftChannel = event.inputBuffer.getChannelData(0);
    rightChannel = event.inputBuffer.getChannelData(1);
    for (idx = i = 0, ref = bufLength; 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
      rmsL += leftChannel[idx] * leftChannel[idx];
      rmsR += rightChannel[idx] * rightChannel[idx];
    }
    rmsL = Math.sqrt(rmsL / bufLength);
    rmsR = Math.sqrt(rmsR / bufLength);
    this.volDecay = [Math.max(this.volume[0] * this.smoothing, rmsL), Math.max(this.volume[1] * this.smoothing, rmsR)];
    volL = 20 * (0.43429 * Math.log(this.volDecay[0]));
    volR = 20 * (0.43429 * Math.log(this.volDecay[1]));
    this.volume = [volL, volR];
    return this.$rootScope.$broadcast('volume', this.volume);
  };

  return AudioEngineService;

})();

angular.module('webAudioApp').service('audioEngineService', ['$rootScope', '$http', 'channelStripFactory', AudioEngineService]);

var TransportService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TransportService = (function() {
  function TransportService($rootScope) {
    this.$rootScope = $rootScope;
    this.stop = bind(this.stop, this);
    this.play = bind(this.play, this);
  }

  TransportService.prototype.play = function() {
    return this.$rootScope.$broadcast('play');
  };

  TransportService.prototype.stop = function() {
    return this.$rootScope.$broadcast('stop');
  };

  return TransportService;

})();

angular.module('webAudioApp').service('transportService', ['$rootScope', TransportService]);

//# sourceMappingURL=data:application/json;base64,